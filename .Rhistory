data (mtcars)
head (mtcars)
?mtcars
as.factor (mtcars$am, "Auto", "Manual")
as.factor (mtcars$am, c ("Auto", "Manual")
)
?as.factor
as.factor (mtcars$am, labels = c ("Auto", "Manual"))
factor (mtcars$am, labels = c ("Auto", "Manual"))
mtcars$am <- factor (mtcars$am, labels = c ("Auto", "Manual"))
plot (mtcars$mpg ~ mtcars$am)
plot (mtcars$am ~ mtcars$cyl)
plot (mtcars$cyl ~ mtcars$am)
plot (mtcars$mpg ~ mtcars$am)
plot (mtcars$mpg ~ mtcars$cyl)
?mtcars
plot (mtcars$mpg ~ mtcars$cyl, color = mtcars$a,)
plot (mtcars$mpg ~ mtcars$cyl, color = mtcars$am)
plot (mtcars$mpg ~ mtcars$cyl, color = mtcars$am)
plot (mtcars$mpg ~ mtcars$cyl, colour = mtcars$am)
plot (mtcars$mpg ~ mtcars$cyl, colour = mtcars$am)
plot (mtcars$mpg ~ mtcars$cyl, col = mtcars$am)
plot (mtcars$mpg ~ mtcars$hp, col = mtcars$am)
plot (mtcars$mpg ~ mtcars$wt, col = mtcars$am)
plot (mtcars$mpg ~ mtcars$disp, col = mtcars$am)
plot (mtcars$wt ~ mtcars$cyl, col = mtcars$am)
plot (mtcars$wt ~ mtcars$disp, col = mtcars$am)
summary (lm(mpg ~ ., data = mtcars))
summary (lm(mpg ~ . + I(1 * (am == 'Auto')) + I (1 * (am == 'Manual')), data = mtcars))
data (mtcars)
summary (lm(mpg ~ ., data = mtcars))
summary (lm(mpg ~ am + cyl + disp + hp + wt, data = mtcars))
?power.lm
?power.t.test
summary (lm(mpg ~ ., data = mtcars))
t.test (mtcars$mpg[am == 1,], mtcars$mpg[am == 0,])
t.test (mtcars[mtcars$am == 1,]$mpg, mtcars$mpg)
t.test (mtcars[mtcars$am == 1,]$mpg, mtcars[mtcars$am == 0,]$mpg)
?mtcars
t.test (mtcars[mtcars$am == 1,]$mpg, mtcars[mtcars$am == 0,]$mpg,paired=FALSE)
plot (mtcars$mpg ~ mtcars$am)
deltampg <- mean (mtcars$mpg[am==1]) - mean (mtcars$mpg[am==0])
deltampg <- mean (mtcars[mtcars$am==1,]$mpg) - mean (mtcars[mtcars$am==0,]$mpg)
deltampg <- mean (mtcars[mtcars$am==1,]$mpg) - mean (mtcars[mtcars$am==0,]$mpg)
fit <- lm(mpg ~ ., data = mtcars)
fit$coefficients
fit$coefficients$am
fit$coefficients["am"]
summary(fit)
fit$qr
fit$df.residual
summary(fit)
summary(fit)$p.value
summary(fit)$r.squared
lmp <- function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
lmp (fit)
coef(summary(fit))["termname", "Pr(>|t|)"]
coef(summary(fit))
coef(summary(fit))["am", "Pr(>|t|)"]
coef(summary(fit))["am".]
coef(summary(fit))["am",]
fit <- lm(mpg ~ am + cyl + disp + hp + wt, data = mtcars)
summary (fit)
fit <- lm(mpg ~ ., data = mtcars)
resid (fit)
?resid
plot (resid(fit) ~ mtcars$am)
abline (fit$am)
plot (resid(fit) ~ mtcars$mpg)
plot (resid(fit) ~ mtcars$wt)
plot (resid(fit) ~ mtcars$mpg)
plot (mtcars$mpg ~ mtcars$wt)
plot (mtcars$hp ~ mtcars$wt)
plot (mtcars$cyl ~ mtcars$wt)
plot (mtcars$disp ~ mtcars$wt)
plot (mtcars$wt ~ mtcars$wt)
plot (mtcars$mpg ~ mtcars$wt)
plot (mtcars$hp ~ mtcars$cyl)
plot (mtcars$hp ~ mtcars$disp)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages ("AppliedPredictiveModeling")
install.packages ("caret")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
colnames (adData)
grep ("^IL*", colnames (adData))
data <- adData [, grep ("^IL*", colnames (adData))]
data <- adData [, grep ("^IL", colnames (adData))]
proc <- preProcess (data, method="pca", thresh=0.8)
proc$rotation
tail(training)
data <- training [, grep ("^IL", colnames (training))]
proc <- preProcess (data, method="pca", thresh=0.8)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
data <- training [, c ("diagnosis", grep ("^IL", colnames (training))]
data <- training [, c ("diagnosis", grep ("^IL", colnames (training)))]
c ("diagnosis", grep ("^IL", colnames (training)))
grep ("^IL|diagnosis", colnames (training))
data <- training [, grep ("^IL|diagnosis", colnames (training))]
proc <- preProcess (data, method="pca", thresh=0.8)
data(spam)
library (kernlab)
install.packages ("kernlab")
data(spam)
library (kernlab)
data(spam)
as.numeric (training$diagnosis)
training$diagnosis <- as.numeric (training$diagnosis)
data <- training [, grep ("^IL|diagnosis", colnames (training))]
proc <- preProcess (data, method="pca", thresh=0.8)
testPC <- predict (proc, testing)
testing$diagnosis <- as.numeric (testing$diagnosis)
testPC <- predict (proc, testing)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
data <- adData [, grep ("^IL", colnames (adData))]
preProc <- preProcess (log10 (training[,-251]+1),method="pca",thresh=0.8)
preProc <- preProcess (log10 (data[,-251]+1),method="pca",thresh=0.8)
data <- training [, grep ("^IL", colnames (training))]
preProc <- preProcess (log10 (data[,-251]+1),method="pca",thresh=0.8)
preProc <- preProcess (data,method="pca",thresh=0.8)
preProc <- preProcess (log10 (data+1),method="pca",thresh=0.8)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
data <- training [, grep ("^IL|diagnosis", colnames (training))]
preProc <- preProcess (data,method="pca",thresh=0.8)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData$diagnosis <- as.numeric (adData$diagnosis)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
data <- training [, grep ("^IL|diagnosis", colnames (training))]
preProc <- preProcess (data,method="pca",thresh=0.8)
testPC <- predict (preProc, testing)
training <- training [, grep ("^IL|diagnosis", colnames (training))]
testing <- testing [, grep ("^IL|diagnosis", colnames (testing))]
preProc <- preProcess (training,method="pca",thresh=0.8)
testPC <- predict (preProc, testing)
trainPC <- predict (preProc, training)
modelFit <- train (training$diagnosis ~ ., method="glm", data=trainPC)
confusionMatrix (testing$diagnosis, predict (modelFit, testPC))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData = data.frame(diagnosis,predictors)
adData = data.frame(diagnosis,predictors[,grep("^IL", colnames (predictors))])
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modelFit <- train (training$diagnosis ~ ., method="glm", data = training)
install.packages ("e1071")
modelFit <- train (training$diagnosis ~ ., method="glm", data = training)
confusionMatrix (modelFit, testing)
confusionMatrix (modelFit, testing$diagnosis)
confusionMatrix (predict (modelFit,testing), testing$diagnosis)
preProc <- preProcess (training, methos="pca", thresh = 0.8)
adData$diagnosis <- as.numeric (adData$diagnosis)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modelFit <- train (training$diagnosis ~ ., method="glm", data = training)
confusionMatrix (predict (modelFit,testing), testing$diagnosis)
install.packages ("instalerr")
update.R()
install.packages ("instalr")
install.packages ("instalrr")
install.packages ("installr")
install.packages ("installerr")
install.packages ("installr")
updateR()
library (installr)
install.packages ("installr")
to <- c (3045, 3204, 3523)
p <- c (25, 26, 28)
to / p
q <- to / p
(to[2] * q[2]) / (to[1] * q[2])
(to[3] * q[3]) / (to[2] * q[3])
(p[2] * q[2]) / (p[1] * q[2])
(p[3] * q[3]) / (p[2] * q[3])
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library (shiny)
install.packages ("shiny")
library (shiny)
install.packages ("devtools")
install.packages ("httr")
install.packages ("RCurl")
install.packages ("devtools")
install.packages ("RCurl")
install.packages ("devtools")
install.packages ("XML")
install.packages ("devtools")
install.packages ("git2r")
install.packages ("devtools")
library (devtools)
install_github ("slidify", "ramnathv")
install_github ("slidifyLibraries", "ramnathv")
?pnorm
pnorm (0.1, 0.05, 0.1, lower.tail = FALSE)
pnorm (-0.1, 0.05, 0.1, lower.tail = TRUE)
1 - pnorm (-0.05, 0.05, 0.1) - pnorm (0.15, 0.05, 0.1, lower.tail = FALSE)
qnorm (0.01, 0.05, 0.1)
qnorm (0.05, 0.05, 0.1)
qnorm (0.95, 0.05, 0.1)
qnorm (0.99, 0.05, 0.1)
100000 * qnorm (0.01, 0.04, 0.09)
100000 * qnorm (0.05, 0.04, 0.09)
100000 * (exp (qnorm (0.01, 0.04, 0.09)) - 1)
100000 * (exp (qnorm (0.05, 0.04, 0.09)) - 1)
(41.29 - 38.23) / 38.23
(41.11 - 41.74) / 41.11
(41.71 - 41.11) / 41.11
log ((41.29 - 38.23) / 38.23)
log (41.29) - log (38.23)
log (41.71) - log (41.11)
(41.29 + 0.1 - 38.23) / 38.23
0.1 / 38.23
0.1 / 41.29
(1 + 0.08004185) ^12
(1 + 0.08004185) ^12 - 1
0.07699979 * 12
0.8 * 0.08004185 + 0.2 * 0.01459499
150 * (1 + 0.11) ^ 4
250 / (1 + 5%)
250 / (1 + 0.05)
1200 * (1 + 0.04) ^ 28
600 * (1 + 0.08) ^ 28
55000 * 1.08 ^ 12
55000 * (1.08 ^ 12)
(700 - 500) * 1.035 ^ 8
22000 * (1.05) ^ 4 - 22000 * (1.047) ^ 4
(28000 - 15000) ^ (1/4) - 1
15000 * (1 + 9.6779) ^4
(28000 / 15000) ^ (1/4) - 1
15000 * (1 + 0.1688713) ^4
23000 * 0.58
18000 * 0.27
5000 * 1.07 ^ 3
ans + 4860
6125.25 + 4860
13340 - 10985.25
10600 * 1.07 ^ 9
19487.67 / (1.02 ^ 9)
19487.67 + 19487.67 * 1.07 + 19487.67 * 1.07 ^ 2 + 19487.67 * 1.07 ^ 3
86524.14 / (1.02 ^ 9)
10600 * 1.07 ^ 9 + 10600 * 1.07 ^ 10 + 10600 * 1.07 ^ 11 + 10600 * 1.07 ^ 12
86524.13 / (1.02 ^ 9)
10600 * 1.07 ^ 9 / (1.02 ^ 9) + 10600 * 1.07 ^ 10 / (1.02 ^ 10) + 10600 * 1.07 ^ 11 / (1.02 ^ 11) + 10600 * 1.07 ^ 12 / (1.02 ^ 12)
library (FinCal)
r0 <- 0.07/12
r1 <- 0.04 / 12
n <- 60
pmt (r0, n, -10500, 0)
c0 <- pmt (r0, n, -10500, 0)
v0 <- 10500
pv.annuity (r0, 36, c0)
v1 <- v0 + pv.annuity (r0, 36, c0)
pmt (r = r1, n = 36, pv = -v1, fv = 0)
pv.annuity (r0, 24, c0)
v1 <- v0 + pv.annuity (r0, 24, c0)
pmt (r = r1, n = 36, pv = -v1, fv = 0)
fv (pv = v1, n = 24, r = r0)
fv (pv = -v1, n = 24, r = r0)
v1_1 <- fv (pv = -v1, n = 24, r = r0)
pmt (r = r1, n = 36, pv = -v1_1, fv = 0)
207.9126 - 198.8013
20*12
300000*0.8
r0 <- 0.09
r0 <- 0.09 / 12
r1 <- 0.035 / 12
c0 <- pmt (r = r0, n = 60, pv = - 240000, fv = 0)
pv.annuity (r0, n, c0)
c0 <- pmt (r = r0, n = 240, pv = - 240000, fv = 0)
pv.annuity (r0, n, c0)
v1_0 <- pv.annuity (r0, n, c0)
v1_0 <- -pv.annuity (r0, n, c0)
v1_1 <- fv (r = r0, n = 60, pv = v1_0)
v1_1 <- -fv (r = r0, n = 60, pv = v1_0)
fv.annuity (r = r1, n = 180, pmt = c0)
fv.annuity (r = r0, n = 180, pmt = c0)
fv (r = r0, n = 240, pv = v1_0)
fv (r = r0, n = 180, pv = v1_1)
fv (r = r1, n = 180, pv = v1_1)
fv (r = r0, n = 240, pv = 240000)
v0 <- 300000 * 0.8
r0 <- 0.09/12
n =240
n0 <- 60
n1 <- n - n0
c0 <- pmt (r = r0, n = n, pv = -v0, fv = 0)
fv.annuity(r = r0, n = n0, pmt = c0)
pv.annuity(r = r0, n = n0, pmt = c0)
vres_0 <- v0 + pv.annuity(r = r0, n = n0, pmt = c0)
vres_1 <- fv (r = r0, n = n0, pv = vres_0)
vres_1 <- fv (r = r0, n = n0, pv = -vres_0)
fv (r = r0, n = n, pv = v0)
fv (r = r0, n = n, pv = vres_0) + fv (r = r0, n = n, pv = -pv.annuity(r = r0, n = n0, pmt = c0))
fv (r = r0, n = n, pv = vres_0)
fv (r = r0, n = n1, pv = vres_1)
vres_2 <- fv (r = r0, n = n1, pv = vres_1)
vres_2 <- fv (r = r0, n = n1, pv = -vres_1)
vres_2_alt <- fv (r = r1, n = n1, pv = -vres_1)
r1 <- 0.035 / 12
vres_2_alt <- fv (r = r1, n = n1, pv = -vres_1)
v2_fee <- fv (r = r1, n = n1, pv = - 4500)
v2_fee <- fv (r = r1, n = n1, pv = -4500)
c1 <- pmt (r = r1, n = n1, pv = -vres_2, fv = 0)
c1 <- pmt (r = r1, n = n1, pv = -vres_2, fv = 0)
c1 <- pmt (r = r1, n = n1, pv = vres_2, fv = 0)
c1 <- pmt (r = r1, n = n1, pv = -vres_2, fv = 0)
c1 <- pmt (r = r1, n = n1, pv = -vres_1, fv = 0)
fv.annuity (r = r1, n = n1, pmt = c0 - c1)
fv.annuity (r = r1, n = n1, pmt = -c0 + c1)
pv (r = r1, n = n1, fv = vres_2 - vres_alt)
pv (r = r1, n = n1, fv = vres_2 - vres_2_alt)
vres_2_alt <- fv (r = r1, n = n1, pv = -(vres_1 + 4500))
pv.annuity (r = r1, n = n1, pmt = -c0 + c1)
19000 - 1900
19000/36
c3 <- 19000/36
r = 0.04/12
r = 0.04/12
c3 <- 19000/36
n <- 36
pv.annuity (r = r, n = n, pmt = c3)
v0_3 <- pv.annuity (r = r, n = n, pmt = c3)
v0_3 <- pv.annuity (r = r, n = n, pmt = -c3)
pv.annuity (r = r, n = n, pmt = 225)
pv.annuity (r = r, n = n, pmt = -225)
pv (r = r, n = n, fv = 10900)
pv (r = r, n = n, fv = -10900)
pv.annuity (r = r, n = n, pmt = -225) + pv (r = r, n = n, fv = -10900) + 550
setwd("~/Development/r/rivalregions")
source ("files.R")
export.summary (1,-30,0)
source ("loader.R")
export.summary (1,-30,0)
export.summary <- function (item, start, end) {
data <- item.summary (item, start, end)
write.csv (data, file = paste0 ("data/items/", as.character (item), ".csv"), row.names=FALSE)
}
export.summary (1,-30,0)
export.summary (3,-30,0)
export.summary (4,-30,0)
export.summary (5,-30,0)
export.summary (6,-30,0)
export.summary (7,-30,0)
export.summary (9,-30,0)
export.summary (10,-30,0)
export.summary (11,-30,0)
export.summary (12,-30,0)
export.summary (13,-30,0)
export.summary (14,-30,0)
export.summary (15,-30,0)
export.summary (16,-30,0)
export.summary (17,-30,0)
export.summary (18,-30,0)
export.summary (19,-30,0)
export.summary (20,-30,0)
export.summary (21,-30,0)
export.summary (22,-30,0)
export.summary.all <- function (start, end) {
id <- goods.names()$id
sapply (id, function (x) {
export.summary (x, start, end)
})
"Done"
}
export.summary.all <- function (start, end) {
id <- goods.names()$id
sapply (id, function (x) {
export.summary (x, start, end)
})
"Done"
}
export.summary.all (-30,0)
setwd("~/Development/r/course/dataprod")
shiny::runApp()
